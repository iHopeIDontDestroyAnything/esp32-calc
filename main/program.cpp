#include "program.h"

#define FOLDER_WIDTH 30 
#define FOLDER_HEIGHT 21 

static const unsigned char folderBitArray[] =
{
0x7f, 0xe0, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x80, 0x1f, 0xff, 0x80, 
0x80, 0x0f, 0xff, 0xc0, 0x80, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00, 0x40, 
0x87, 0xff, 0xff, 0xf8, 0x8f, 0xff, 0xff, 0xfc, 0x88, 0x00, 0x00, 0x04, 0x98, 0x00, 0x00, 0x0c, 
0x90, 0x00, 0x00, 0x08, 0xb0, 0x00, 0x00, 0x18, 0xa0, 0x00, 0x00, 0x10, 0xe0, 0x00, 0x00, 0x10, 
0xe0, 0x00, 0x00, 0x30, 0xc0, 0x00, 0x00, 0x20, 0xc0, 0x00, 0x00, 0x60, 0xff, 0xff, 0xff, 0xc0, 
0x3f, 0xff, 0xff, 0x00
};

static const unsigned char folderBitArrayInverted[] =
{
0x7f, 0xe0, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xc0, 
0xf8, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf7, 0xff, 0xff, 0xfc, 0xe7, 0xff, 0xff, 0xfc, 
0xef, 0xff, 0xff, 0xf8, 0xcf, 0xff, 0xff, 0xf8, 0xdf, 0xff, 0xff, 0xf0, 0x9f, 0xff, 0xff, 0xf0, 
0x9f, 0xff, 0xff, 0xf0, 0xbf, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xc0, 
0x3f, 0xff, 0xff, 0x00
};


namespace jalc
{

Program::~Program()
{
}

ProgramMenu::ProgramMenu(Display &display )
: m_Display(&display), m_Cursor(0), m_AppCount(4)
{
  m_Apps = new std::string[4]; 
  m_Apps[0] = "Calc";
  m_Apps[1] = "Files";
  m_Apps[2] = "Images";
  m_Apps[3] = "Games";
}

ProgramMenu::~ProgramMenu()
{
  delete m_Apps;
}

void ProgramMenu::OnUpdate( EventHandler &eh, KeyEventHandler &keh )
{
  while( eh.PollEvents() )
  {
    switch( eh.Type() )
    {
      case jalc::EventType::KEY_PRESSED:
        if( keh.IsPressed( Scancode::ZERO ) )
        {
          m_Cursor++;
        }
        if( keh.IsPressed( Scancode::ONE ) )
        {
          m_Cursor--;
        }
        break;
      default:
        break;
    }
  }
  if(m_Cursor < 0)
    m_Cursor = m_AppCount - 1;
  else if(m_Cursor >= m_AppCount)
    m_Cursor = 0;

}

void ProgramMenu::OnDraw() const
{
  m_Display->Clear();
  unsigned char x = m_Display->Width() / m_AppCount;
  unsigned char indentX = x / 2 - FOLDER_WIDTH / 2; //indent from x to fit Folder image to 'center'
  unsigned char y = m_Display->Height()/ 2 - FOLDER_HEIGHT /2;
  for( unsigned char i =0; i < m_AppCount; i++ )
  {
    unsigned char curDrawSpot = i * x + indentX;
    if(i == m_Cursor)
      {
      m_Display->PrintBitMap({curDrawSpot, y}, FOLDER_WIDTH, FOLDER_HEIGHT, folderBitArrayInverted, 0xf);
      }
    else
      {
      m_Display->PrintBitMap({curDrawSpot, y}, FOLDER_WIDTH, FOLDER_HEIGHT, folderBitArray, 0xf);
      }
    unsigned char a = m_Display->Height() - 15;
    m_Display->SetCursor({curDrawSpot,a});
    m_Display->Print(m_Apps[i].c_str() );
  }
  m_Display->Update();
}


};


